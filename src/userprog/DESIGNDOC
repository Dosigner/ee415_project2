             +--------------------------+
             |          CS 140          |
             | PROJECT 2: USER PROGRAMS |
             |     DESIGN DOCUMENT      |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Dongju Kim <dongju0531hb@kaist.ac.kr>


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.
제 컴퓨터에서는 잘 되었는데,

갑자기 vm으로 옮기고 나서
parse_option() 에서 인자들을 parse 하지 못한다는 error가 뜹니다.
찾아보니 다음과 같은 문제인데, 아래 방법 대로
https://stackoverflow.com/questions/20822969/pintos-programming-project-2
loader.bin, kernel.bin 위치도 수정했는데 계속 오류가 발생합니다.ㅠㅠ.

위 오류 때문에 DESIGN DOC파일이 조금 늦게 업로드 되었습니다ㅠㅠ

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
https://jybaek.tistory.com/593
https://oslab.kaist.ac.kr/wp-content/uploads/esos_files/courseware/undergraduate/PINTOS/01.pdf
https://oslab.kaist.ac.kr/wp-content/uploads/esos_files/courseware/undergraduate/PINTOS/02.pdf
https://oslab.kaist.ac.kr/wp-content/uploads/esos_files/courseware/undergraduate/PINTOS/03.pdf
https://oslab.kaist.ac.kr/wp-content/uploads/esos_files/courseware/undergraduate/PINTOS/04_File_Descriptor.pdf
https://oslab.kaist.ac.kr/wp-content/uploads/esos_files/courseware/undergraduate/PINTOS/05_Denying_Write_to_Executable.pdf

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
argument_stack(char* argv[], int argc, void **esp) 함수를 중심으로 구현했고,
모든 함수내 local variable을 사용하였다.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?
process_execute( )에서는  strtok_r를 한번만 하여 첫번째 token만
start_process( )에서는  strtok_r를 전부 token화 시킨 후 char *parse[64] 배열에 각 argument를 저장하였다.
overflow를 감지하기 위해 최대 argument를 64개 저장할 수 있게 설정 했고, 
argu_count라는 변수로 token되는 인수의 갯수를 샌다.
그 결과 argu_count가 64를 넘으면 argument_stack() 호출 전 exit(-1)로 처리한다.

argument_stack( )함수에서는 argu_count만큼 interrupt frame에 parse들의 push된다.
이때 esp(stack pointer regsiter)가 가르키는 주소값을 NAME과 argument의 한글자 마다 -1씩 감소한다.
즉 argument에 오른쪽에 위치한 것들이 esp의 높은 주소에 위치한다. 점점 왼쪽에 있는 변수가 push되고 esp주소는 1씩 줄어든다.
그 후 word-align을 위해 주소값이 4에 맞춰서 딱딱 내려올 수 있도록 주소값이 4로 나누어 떨어질때까지 0을 넣어준다.
그 후 NAME과 argument의 주소값을  push하고 이역시도 오른쪽 변수 순으로 esp 주소가 4씩 작아지면서 들어간다.
그 후 argv 주소 값을 넣어준 후 argc 값과 fake address 를 넣어준다. 이때 각각 값들은 esp의 주소 값이 4씩 줄어드면서 해당 위치에 들어간다.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
strtok는 strtok_r로 만들어지는 함수이다.
stktok( )함수 내부에 static har *olds 가 있는데,
static으로 선언되어 program의 data영역에 저장된다.
이 뜻은 data 영역에 global vairble도 포함되서 어디서나 접근 가능한 변수이다.
임시로 사용되는 stack 영역이 아니기 때문에 multi-thread로 접근하여 strtok()
를 호출하게 되면 내부 값에 영향을 많이 미치게 되어 atomic하게 동작하지 않는다.

반면 strtok_r의 경우는 char **save ptr이라는 변수에 token되고 남은 녀석들이 따로 저장될 수 있다.
이는 외부에서 함수를 호출할 때 save_ptr 을 포인터 변수를 만들어야 하지만, atomic하게 각자 동작할 수 있어 안전하다.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

Pintos에서 커널은 명령을 실행 파일로 분리합니다.
>> 및 인수. UNIX와 같은 시스템에서는 쉘이 이것을합니다.
>> 분리. UNIX 접근법의 적어도 두 가지 이점을 확인하십시오.

장점1. Kernel을 실행하고 Kernel의 작업량을 줄여서 시간 효율성을 높일 수 있다.

장점2. Kenrel 공간보다 User공간에서 argument를 나누는 것이 좀 더 안전하다. 
Kernel 공간에서 argument를 분리하다가 다른 space에 침범을 할 수도 있다. 그래서 UNIX는 이와 같이 보안성을 높일 수 있다.

                 SYSTEM CALLS
                 ============



---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

in syscall.h
exec( ) 함수의 반환 값을 위한 목적
  typedef int pid_t;

create와 remove() 함수의 반환 값을 위한 목적
  #define bool    _Bool

read와 write 함수를 사용할 때 동시에 사용되면 안되므로, 해당 process가 lock_acquire하고 read나 write를 전부 수행하고 lock_release를 수행이 필요
이 때 lock을 하기 위해 필요한 구조체
  struct lock filesys_lock;

in thread.h

자식 프로세스가 부모 프로세스를 저장하기 위함
  struct thread *parent;       // point to parent process

부포 프로세스가 자신의 자식 프로세스들을 list로 관리하기 위함
  struct list children;        // for children list

자식 프로세스들이 부모 프로세스의 list의 원소로 관리하기 위함
  struct list_elem child_elem; // When I'm child process


  struct semaphore exit_sema; // for child semaphore

start_process()에서 load로 메모리에 프로그램을 적재할 때까지 process_execute에서 기다리기 위함
  struct semaphore load_sema;  // for load


    bool wait_called_exit;

process_exit( )함수가 호출되었을 때 현재 process가 thread가 exit된다는 것을 남기기 위한 표식.
이를 통해 부모 프로세스가 자식을 기다리면서 자신의 children list에서 exit된 친구가 있으면 return해서 wait을 멈추는 역할
    bool thread_exit;

process_wait( )함수에서 부모 process가 대기인 상황 child process들은 thread_exit에 true가 있으면
자신이 exit()을 호출했을 때 저장한 status를 부모 process에게 return하기 위함

    int exit_status;             //for exit()

start_process()함수 내부의 load()함수에서 성공적으로 메모리에 프로그램을 적재함을 저장하기 위함
    int load_status;

   /* ++++ Project2.3 File/IO ++++ */

각 프로세스의 FILE I/O를 위한 파일 디스크립터
   struct file *fd[128];     // file descriptor

현재 thread가 실행하고 있는 file
   struct file *running_file;

현재 thread가 open, close를 할때 다음의 어떤 file_descriptor의 fd값에 연결해야 되는지 미리 알려서
각각 함수에서 처리하기 위함
   int next_fd; //point out next file descriptor

simple-sig함수 구현을 위해 sigaction() 호출시 해당 handler함수를 저장하기 위함. 3개인 이유는
simple-sig.c에 ONE, TWO, THREE만 신호를 보내서

   /* ++++ Project2.5 simple-sig ++++ */
    void *sig_handler[3];

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

file descriptor는 각각의 single process마다 할당이 된다. 
현재는 file descriptor에서 fd값이 stdin(0)과 stdout(1)을 제외하면,
file open시 저장한 next_fd 값(fd값들 중에 최솟값)을 택하여 file을 ope하고 해당 file에 fd를 할당한다.


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

user program에서 read( ) , write( )함수를 호출한다.
이 함수는 lib/syscall.c 함수에서 user가 넣은 argument들을
stack pointer를 통해 kuser stack에 쌓는다.
다 push한 후 int 0x30이 호출되고, Interrupt Vector table에서는
0x30은 syscall_handler를 호출한다. 이 때 syscall handelr에는 open과 write에 해당하는 system call number가
switch 문을 통해 실행되고, 방금 stack에 넣어준 변수들을 통해서 syscall.c 함수 내부에서 선언된 write(), read()함수를 다시 호출한다.
이는 kernel에서 동작되는 거라고 보면 된다. 
read(fd , , )함수의 경우 stdin의 경우 input_getc()를 return해주고, fd값이 다른 것일 경우 file_read함수를 이용하여 해당 fd값에서 파일을 읽는다.
그리고 읽은 byte 수를 user program에게 다시 전달하기 위해 규칙에 따라 intr_frame의 eax register에 저장한다.
write도 마찬가지 이다. 다만 stdout의 경우 putbuf를, fd값이 다른 것일 경우 file_write함수를 이용하여 파일을 쓴다.
역시 쓴 byte수를 eax register에 저장.


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?
full page인 4,096 byte를 하나의 page table에서 kernel로 복사한다고 가정한다면 inspection 수는 최소 한 번이다. 
딱 2byte 데이터의 경우만 복사하는 경우, 최대 2개, 최소 한번의 page table inspection이 필요할 것이다. 
만약 1byte씩 각각 서로 다른 page table을 복사한다면 최대 4,096번의 inspection이 필요할 것이다. 

project2에서는 user program을 메모리에 적재할 때마다 주어진 바이트 수(read_bytes)에 맞게 install_page{ pagedir_get_page() } 함수를 호출하는데, 
project3의 virtual memory를 이용하여 필요한 경우에만 page table을 inspect하면 더 효율적일 것이다.


>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

wait() 함수는 process_wait() return하여 해당 함수를 실행한다. 
이 함수는 자식 process가 정상적으로 exit하는 경우 그 자식 process의 exit_status 값을 return 한다. 
좀 더 자세히
1. children 내부를 돌면서 기다리는 자식 프로세스의 tid인 child_thread id와 동일한 child_thread를 찾고 wait_called_exit를 1로 설정한다. 이는 혹여나 다시 똑같이 wait(똑같은 pid) 호출되는 것을 후에 막기위해서다. 
2. 만약 동일한 child_thread를 찾지 못하면 -1을 return하고, 
3. 동일한 tid를 찾았을 경우 해당 자식 process가 끝날 때 까지 기다리기 위해 exit_semaphore를 down 시킨다. 
4. 이후에 부모(현재) thread의 child_list에서 child_elem을 제거한다. 

process 종료시에는 file을 현재 running중인 file을 닫고, file descriptor를 모두 닫아주고 
만약 자신이 부모  process인 경우 children list에서 자식 프로세스를 위해 잠시 wait해준다.
이는 좀비 process가 되지 않기 위함 


>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

항상 system call시 어떤 주소를 참조하는 모든 변수 및 포인터에 대해 check_address()를 호출하여 user memory의 범위 밖이면 exit(-1)을 call했다 
user memory 안이라도 page fault인 경우 exception.c에 page_fault() 함수에서 exit(-1)을 호출한다. 
exit(-1)은 thread_exit()을 호출하고 결국 process_exit( )를 호출한다. 이떄 해당 함수 실행 시 현재 running file을 close하고
모든 file_descriptor의 file이 있는 경우 close()를 한다.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

semaphore를 이용하여 init_thread()에서 value=0으로 설정하면, 공유자원을 처음부터 접근할 수 없다. 누군가 sema_up을 해야 한다.
process_execute()에서는 sema_down을 호출하여 잠시 block이 대기하여 프로그램 메모리 적재를 기다린다.
start_processs()에서 load가 완료되면 load_lock semaphore를 sema_up하여 load가 완료된 것을 알린다. 
만약 load가 sucesss=false이면 tid를 TID_ERROR로 설정하고 부모 process에게 전달하고 자식 process는 exit(-1)를 call한다.



>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

1. C가 존재하기 전 wait() 호출하는 경우, children에서 알맞은 자식 process를 찾지 못한 경우 -1을 return 한다.
2. 만약 children에 C가 존재하는 경우, 이미 wait(C)를 했는데 또 wait이 되는 경우를 방지하기 위해 thread 구조체에 wait_called_exit 변수를 추가하여 처음 call 된 경우 해당 변수를 true로 설정하고 다시 이 wait_called_exit가 true인 것을 만나면 -1를 return하게 한다.
3, 부모 process가 자식 process에 대한 wait이 끝나기 직전 children에서 지우고, palloc_free_page(child_t)를 call 하여 모든 메모리에 대해 free한다.
4. 부모 process가 자식 process를 기다리지 않고 종료되는 경우(좀비 process 생성)를 방지하기 위해, process_exit()에서 children을 탐색하여 모든 child processor에 대해 process_wait을 해준다. 
5. 자식 process가 부모 process를 wait()를 하기 전에 종료되는 경우, thread 구조체에 있는 멤버변수인 thread_exit이 true인 것을 체크하고 이미 exit()호출 때 미리 저장해 둔 exit_status를 return 한다.
6. 자식 process가 존재하기 전에 부모 process가 종료된 경우 자식 process가 create될 때 현재 running thread를 parent thread를 설정하기 부모가 누구인지 모르지 못할 것이다. 


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
 check_address()함수를 만들어 해당 address가 null은 아닌지, 그리고 user memory를 벗어나지는 않았는지 
 is_user_vaddr(addr) 즉 vaddr <PHYS_BASE를 확인하였다. 또한 exception.c 파일에서는 page_fault가 일어난 경우
 kernel에 의해 쓰여졌거나 fault_addr가 kernel를 벗어난 경우와 read/open하고 있는 page에 접근한 경우 exit(-1)해서 해당 process를 종료하도록 했다.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

항상 각 thread가 next_fd값 (다음번에 비어있는 file descriptor의 index 중 최솟값)을 통해서 
open 시에 바로 해당 file을 file descriptor에 연결할 수 있다.


>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

identity mapping을 사용하였지만, 이는 pintos가 하나의 process에 하나의 thread를 갖기 때문이다.
범용적인 os의 경우 하나의 process의 여러개의 thread를 가질 수 있기에 multi-thread processing에서는
tid_t와 pid_t를 동일하게 mapping하지 않는 것이 필요하다.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?
too hard and too long time

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
Not yet...

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
